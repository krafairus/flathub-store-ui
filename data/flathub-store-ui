#!/usr/bin/env python3

from PyQt5.QtCore import QUrl, QProcess, QTranslator, QLocale, QDir, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (
    QMessageBox, QApplication, QMainWindow, QVBoxLayout, QWidget, QSizePolicy, QTextEdit, QPushButton, QDialog,
    QToolBar, QFileDialog, QHBoxLayout, QLabel, QScrollArea, QFrame, QProgressBar
)
from PyQt5.QtWebEngineWidgets import QWebEngineView

import shutil
import sys
import tempfile
import urllib.request
import webbrowser
import json

translation_path = "/usr/share/flathub-store-ui/translations"

def get_user_language():
    locale = QLocale.system().name()
    return locale

class CommandOutput(QDialog):
    def __init__(self, title, content, process=None, is_process=False, parent=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.resize(650, 400)
        self.layout = QVBoxLayout()

        frame = QFrame(self)

        self.text_edit = QTextEdit(self)
        self.text_edit.setReadOnly(True)
        self.text_edit.setPlainText(content)

        frame_layout = QVBoxLayout(frame)
        frame_layout.addWidget(self.text_edit)

        self.layout.addWidget(frame)

        self.is_process = is_process
        self.process = process

        self.button_finish = QPushButton(self.tr("Finalizar"), self)
        self.button_finish.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.button_finish.clicked.connect(self.close)
        self.button_finish.hide()
        self.layout.addWidget(self.button_finish)

        if self.is_process and self.process:  
            self.button_cancel = QPushButton(self.tr("Cancelar"), self)
            self.button_cancel.setStyleSheet("""
                QPushButton {
                    background-color: #FF5C5C;
                    border-radius: 8px;
                    color: white;
                    font-weight: bold;
                    padding: 5px 15px;
                }
                QPushButton:hover {
                    background-color: #FF2D2D;
                }
            """)
            self.button_cancel.clicked.connect(self.cancel_process)
            self.layout.addWidget(self.button_cancel)
            self.process.finished.connect(self.on_process_finished)
        else: 
            self.button_close = QPushButton(self.tr("Cerrar"), self)
            self.button_close.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    border-radius: 8px;
                    color: white;
                    font-weight: bold;
                    padding: 5px 15px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
            self.button_close.clicked.connect(self.close)
            self.layout.addWidget(self.button_close)

        self.setLayout(self.layout)

    def cancel_process(self):
        if self.process:
            self.process.terminate()
            self.process.waitForFinished()
            self.text_edit.append(self.tr("Proceso cancelado."))
        self.switch_to_finalize_button()

    def on_process_finished(self):
        output = self.process.readAll().data().decode()
        if output:
            self.text_edit.append(output)
        
        self.switch_to_finalize_button()

    def switch_to_finalize_button(self):
        if hasattr(self, 'button_cancel'):
            self.button_cancel.hide()
        self.button_finish.show()

class InstalledAppsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr('Aplicaciones Flatpak Instaladas'))
        self.resize(650, 450)

        self.layout = QVBoxLayout()

        self.nav_bar = QHBoxLayout()

        self.button_system = QPushButton(self.tr("Sistema"), self)
        self.button_system.setFixedSize(100, 30)
        self.button_system.setStyleSheet("""
            QPushButton {
                background-color: #d9534f;  
                border-radius: 5px;
                color: #333;
                font-size: 12px;
                font-weight: bold;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #993e3b;  
            }
        """)
        self.button_system.clicked.connect(lambda: self.filter_apps("system"))
        self.nav_bar.addWidget(self.button_system)

        self.button_user = QPushButton(self.tr("Usuario"), self)
        self.button_user.setFixedSize(100, 30)
        self.button_user.setStyleSheet("""
            QPushButton {
                background-color: #66b3ff;  
                border-radius: 5px;
                color: #333;
                font-size: 12px;
                font-weight: bold;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #88a9b4;  
            }
        """)
        self.button_user.clicked.connect(lambda: self.filter_apps("user"))
        self.nav_bar.addWidget(self.button_user)

        self.label_category = QLabel(self.tr("Seleccione una categoría de instalación"), self)
        self.label_category.setStyleSheet("QLabel { font-size: 12px; color: #48c0d5; margin-left: 10px; }")  # Añadir margen izquierdo
        self.nav_bar.addWidget(self.label_category)

        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.nav_bar.addWidget(spacer)

        self.layout.addLayout(self.nav_bar)

        self.scroll_area = QScrollArea(self)
        self.scroll_area.setWidgetResizable(True)

        self.scroll_content = QWidget(self.scroll_area)
        self.scroll_layout = QVBoxLayout(self.scroll_content)

        self.scroll_content.setLayout(self.scroll_layout)
        self.scroll_area.setWidget(self.scroll_content)

        self.layout.addWidget(self.scroll_area)

        self.button_close = QPushButton(self.tr("Cerrar"), self)
        self.button_close.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.button_close.clicked.connect(self.close)
        self.layout.addWidget(self.button_close)

        self.setLayout(self.layout)

        self.all_apps = self.load_all_apps()
        self.filter_apps("system")  

    def load_all_apps(self):
        user_process = QProcess()
        user_process.start("flatpak", ["list", "--user", "--columns=application,installation"])
        user_process.waitForFinished()
        user_output = user_process.readAll().data().decode().strip().splitlines()

        system_process = QProcess()
        system_process.start("flatpak", ["list", "--system", "--columns=application,installation"])
        system_process.waitForFinished()
        system_output = system_process.readAll().data().decode().strip().splitlines()

        all_apps = user_output + system_output
        return all_apps

    def filter_apps(self, category):
        for i in reversed(range(self.scroll_layout.count())):
            self.scroll_layout.itemAt(i).widget().setParent(None)

        for app_info in self.all_apps:
            app_name, installation_type = app_info.split("\t") 

            if category == "all" or (category == "system" and installation_type == "system") or (category == "user" and installation_type == "user"):
                app_layout = QHBoxLayout()

                frame = QFrame(self)
                frame.setStyleSheet("QFrame { border-radius: 10px; background-color: #f0f0f0; padding: 10px; margin-bottom: 10px; }")
                frame.setLayout(app_layout)

                app_label = QLabel(f"{app_name} ({'Usuario' if installation_type == 'user' else 'Sistema'})")
                app_label.setStyleSheet("QLabel { font-size: 14px; font-weight: bold; color: #333; }")
                app_label.setWordWrap(True)

                uninstall_button = QPushButton(self.tr("Desinstalar"))
                uninstall_button.setFixedSize(100, 30)
                uninstall_button.setStyleSheet("QPushButton { background-color: #d9534f; color: white; border-radius: 5px; padding: 5px; font-size: 12px; }")
                uninstall_button.clicked.connect(lambda _, name=app_name, install_type=installation_type: self.uninstall_app(name, install_type))

                info_button = QPushButton(self.tr("Información"))
                info_button.setFixedSize(100, 30)
                info_button.setStyleSheet("QPushButton { background-color: #5bc0de; color: white; border-radius: 5px; padding: 5px; font-size: 12px; }")
                info_button.clicked.connect(lambda _, name=app_name: self.show_app_info(name))

                app_layout.addWidget(app_label)
                app_layout.addWidget(uninstall_button)
                app_layout.addWidget(info_button)

                self.scroll_layout.addWidget(frame)

    def uninstall_app(self, app_name, installation_type):
        self.uninstall_process = QProcess()
        self.output_window = CommandOutput(self.tr("Desinstalando..."), "", self)
        self.output_window.show()
        self.uninstall_process.setProcessChannelMode(QProcess.MergedChannels)
        self.uninstall_process.readyRead.connect(lambda: self.output_window.text_edit.append(self.uninstall_process.readAll().data().decode()))
        self.uninstall_process.finished.connect(lambda: self.on_uninstall_finished(app_name, installation_type))

        if installation_type == "user":
            self.uninstall_process.start("flatpak", ["uninstall", "--user", "-y", app_name])
        else:
            self.uninstall_process.start("flatpak", ["uninstall", "--system", "-y", app_name])

    def on_uninstall_finished(self, app_name, installation_type):
        self.all_apps = self.load_all_apps()
        
        self.filter_apps("all")  
        
        self.output_window.close()

    def show_app_info(self, app_name):
        info_process = QProcess()
        info_process.start("flatpak", ["info", app_name])
        info_process.waitForFinished()
        info_output = info_process.readAll().data().decode()
        info_window = CommandOutput(f'App {app_name}', info_output, parent=self)
        info_window.setWindowModality(True)
        info_window.show()

class RepairProgressDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr('Reparación de Flatpak'))
        self.resize(600, 450)

        self.layout = QVBoxLayout(self)
        self.progress_bar = QProgressBar(self)
        self.layout.addWidget(self.progress_bar)
        self.text_edit = QTextEdit(self)
        self.text_edit.setReadOnly(True)
        self.layout.addWidget(self.text_edit)

        self.button_cancel = QPushButton(self.tr("Cancelar"), self)
        self.button_cancel.setStyleSheet("""
            QPushButton {
                background-color: #FF5C5C;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #FF2D2D;
            }
        """)
        self.button_cancel.clicked.connect(self.cancel_repair_process)
        self.layout.addWidget(self.button_cancel)

        self.button_finalize = QPushButton(self.tr("Finalizar"), self)
        self.button_finalize.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.button_finalize.clicked.connect(self.close)
        self.button_finalize.hide()
        self.layout.addWidget(self.button_finalize)
        self.repair_process = None
        self.setLayout(self.layout)

    def set_repair_process(self, process):
        self.repair_process = process

    def cancel_repair_process(self):
        if self.repair_process:
            self.repair_process.terminate()
            self.repair_process.waitForFinished()
            self.text_edit.append(self.tr("Reparación cancelada."))
        self.switch_to_finalize_button()

    def switch_to_finalize_button(self):
        self.button_cancel.hide()
        self.button_cancel.setStyleSheet("""
            QPushButton {
                background-color: #FF5C5C;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #FF2D2D;
            }
        """)
        self.button_finalize.show()

class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr('Acerca de'))
        self.resize(300, 60)

        layout = QVBoxLayout()

        flatpak_version = self.get_flatpak_version()
        flatpak_label = QLabel(self.tr(f'Flatpak Versión: {flatpak_version}'))
        layout.addWidget(flatpak_label)

        app_count = self.get_installed_app_count()
        app_count_label = QLabel(self.tr(f'Apps instaladas (sistema): {app_count}'))
        layout.addWidget(app_count_label)

        spac2_label = QLabel(self.tr(' '))
        creator_label = QLabel(self.tr('Desarrollado por krafairus'))
        licence_label = QLabel(self.tr('Bajo la licencia MIT'))
        note1_label = QLabel(self.tr('Este software no esta afiliado a Flathub.'))
        note2_label = QLabel(self.tr('No Proporcionamos ningun programa '))
        note3_label = QLabel(self.tr('alojado en Flathub.'))
        version_label = QLabel(self.tr('Versión de la app: 1.5.3'))
        url_label = QLabel(self.tr('URL: https://www.github.com/krafairus/flathub-store-ui'))
        spac1_label = QLabel(self.tr(' '))
        thanks_label = QLabel(self.tr('Gracias a todo el equipo de Deepin en Español'))
        thanksurl_label = QLabel(self.tr('URL: https://deepinenespañol.org'))
        
        layout.addWidget(spac2_label)
        layout.addWidget(creator_label)
        layout.addWidget(licence_label)
        layout.addWidget(note1_label)
        layout.addWidget(note2_label)
        layout.addWidget(note3_label)
        layout.addWidget(version_label)
        layout.addWidget(url_label)
        layout.addWidget(spac1_label)
        layout.addWidget(thanks_label)
        layout.addWidget(thanksurl_label)

        close_button = QPushButton(self.tr("Cerrar"))
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_button.clicked.connect(self.close)
        layout.addWidget(close_button)

        self.setLayout(layout)

    def get_flatpak_version(self):
        process = QProcess()
        process.start("flatpak", ["--version"])
        process.waitForFinished()
        version = process.readAll().data().decode().strip()
        return version

    def get_installed_app_count(self):
        process = QProcess()
        process.start("flatpak", ["list", "--system", "--columns=application"])  
        process.waitForFinished()
        output = process.readAll().data().decode().strip().splitlines()
        return len(output)

class PythonWebView(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Flathub Store')
        self.setWindowIcon(QIcon('/usr/share/icons/hicolor/scalable/apps/flathub-store-ui'))
        self.resize(1000, 600)

        self.setWindowFlags(Qt.FramelessWindowHint)

        # Crear la barra de título
        self.create_custom_title_bar()

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)
        self.layout.setContentsMargins(0, 0, 0, 0)  
        self.layout.setSpacing(0)  

        self.wview = QWebEngineView(self)
        self.wview.setStyleSheet("border: none; margin: 0; padding: 0;")  
        settings = self.wview.settings()
        self.wview.load(QUrl('https://flathub.org/es'))
        self.wview.page().profile().downloadRequested.connect(self.download_requested)
        self.layout.addWidget(self.wview)
        
        self.local_install_process = None

        self.wview.page().loadFinished.connect(self.inject_custom_css)

    def create_custom_title_bar(self):
        """Crea una barra de título personalizada."""
        self.title_bar = QWidget(self)
        self.title_bar.setFixedHeight(40)  
        self.title_bar.setObjectName("title_bar")  
        self.title_bar.setStyleSheet("background-color: #262626; border-bottom: 1px solid #333333;")

        title_layout = QHBoxLayout(self.title_bar)
        title_layout.setContentsMargins(10, 0, 10, 0)
        title_layout.setSpacing(0)

        self.create_icon_button(
            self.tr("Inicio flathub"), 
            "/usr/share/flathub-store-ui/icons/home.png", 
            self.go_home, title_layout)
        self.button_back = self.create_icon_button(
            self.tr("Volver"), 
            "/usr/share/flathub-store-ui/icons/back.png", 
            self.go_back, title_layout, enable=False)
        self.create_icon_button(
            self.tr("Gestionar apps"), 
            "/usr/share/flathub-store-ui/icons/applications.png", 
            self.show_installed_apps, title_layout)
        self.create_icon_button(
            self.tr("Actualizar Apps"), 
            "/usr/share/flathub-store-ui/icons/update.png", 
            self.update_flatpaks, title_layout)
        self.create_icon_button(
            self.tr("Historial de operaciones recientes"), 
            "/usr/share/flathub-store-ui/icons/history.png", 
            self.show_history, title_layout)
        self.create_icon_button(
            self.tr("Reparar Paquetes"), 
            "/usr/share/flathub-store-ui/icons/repair.png", 
            self.repair_flatpak, title_layout)
        self.create_icon_button(
            self.tr("Instalar .flatpak"), 
            "/usr/share/flathub-store-ui/icons/local.png", 
            self.install_local_flatpak, title_layout)
        self.create_icon_button(
            self.tr("Acerca de"), 
            "/usr/share/flathub-store-ui/icons/about.png", 
            self.show_about, title_layout)

        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        title_layout.addWidget(spacer)

        minimize_button = QPushButton("─")
        minimize_button.setFixedSize(40, 40)
        minimize_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #BEBEBE;
                font-size: 16px;
                border: none; /* Eliminar borde */
                border-radius: 0px; /* Eliminar bordes redondeados */
            }
            QPushButton:hover {
                background-color: #4A4A4A;
            }
            QPushButton:pressed {
                background-color: #323232;
            }
        """)
        minimize_button.clicked.connect(self.showMinimized)
        title_layout.addWidget(minimize_button)

        close_button = QPushButton("✕")
        close_button.setFixedSize(40, 40)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #BEBEBE;
                font-size: 16px;
                border: none; /* Eliminar borde */
                border-radius: 0px; /* Eliminar bordes redondeados */
            }
            QPushButton:hover {
                background-color: #4A4A4A;
            }
            QPushButton:pressed {
                background-color: #323232;
            }
        """)
        close_button.clicked.connect(self.close)
        title_layout.addWidget(close_button)

        self.setMenuWidget(self.title_bar)

        self.dragging = False
        self.offset = None

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton and self.title_bar.underMouse():
            self.dragging = True
            self.offset = event.globalPos() - self.pos()

    def mouseMoveEvent(self, event):
        if self.dragging:
            self.move(event.globalPos() - self.offset)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = False

    def mouseDoubleClickEvent(self, event):
        if event.button() == Qt.LeftButton and self.title_bar.underMouse():
            if self.isMaximized():
                self.showNormal()
            else:
                self.showMaximized()

    def create_icon_button(self, tooltip, icon_path, slot, layout, enable=True):
        button = QPushButton()
        button.setIcon(QIcon(icon_path))
        button.setToolTip(tooltip)  
        button.setFixedSize(40, 40)  
        button.clicked.connect(slot)
        button.setEnabled(enable)
        button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #4A4A4A;
            }
        """)
        layout.addWidget(button)
        return button

    def inject_custom_css(self):
        """
        Inyecta CSS personalizado para corregir el botón.
        """
        custom_css = """
        /* Estilos para el campo de búsqueda */
        #search {
            background-color: #ffffff !important; /* Fondo blanco */
            border: 2px solid #45a049 !important; /* Borde verde */
            border-radius: 25px !important; /* Bordes redondeados */
            padding: 10px 40px 10px 40px !important; /* Espaciado interno */
            font-size: 16px !important; /* Tamaño de fuente */
            color: #333333 !important; /* Color del texto */
            outline: none !important; /* Eliminar el contorno al enfocar */
            transition: border-color 0.3s ease !important; /* Transición suave */
        }

        /* Estilos para el campo de búsqueda al enfocar */
        #search:focus {
            border-color: #45a049 !important; /* Borde verde más intenso */
            box-shadow: 0 0 5px rgba(69, 160, 73, 0.5) !important; /* Sombra al enfocar */
        }

        /* Estilos para el ícono de búsqueda */
        .relative .absolute svg {
            color: #45a049 !important; /* Color verde para el ícono */
        }

        /* Estilos para el botón de búsqueda */
        .relative .absolute button {
            background-color: transparent !important; /* Fondo transparente */
            border: none !important; /* Sin borde */
            cursor: pointer !important; /* Cursor de puntero */
        }

        /* Estilos para el botón de búsqueda al pasar el cursor */
        .relative .absolute button:hover {
            background-color: rgba(69, 160, 73, 0.1) !important; /* Fondo verde claro */
        }

        /* Estilos para el texto de placeholder */
        #search::placeholder {
            color: #999999 !important; /* Color gris para el placeholder */
        }

        /* Estilos para el botón específico */
        .bg-flathub-celestial-blue {
            background-color: #45a049 !important; /* Color azul */
            color: white !important; /* Texto blanco */
            border-radius: 8px !important; /* Bordes redondeados */
            padding: 10px 20px !important; /* Espaciado interno */
            font-size: 16px !important; /* Tamaño de fuente */
            font-weight: bold !important; /* Texto en negrita */
            border: none !important; /* Sin borde */
            cursor: pointer !important; /* Cursor de puntero */
            text-align: center !important; /* Texto centrado */
            text-decoration: none !important; /* Sin subrayado */
            display: inline-block !important; /* Mostrar como bloque en línea */
            transition: background-color 0.3s ease !important; /* Transición suave */
        }

        /* Estilos para el hover (cuando el cursor está sobre el botón) */
        .bg-flathub-celestial-blue:hover {
            background-color: #4CAF50 !important; /* Color azul más oscuro */
        }

        /* Estilos para el active (cuando el botón está siendo clickeado) */
        .bg-flathub-celestial-blue:active {
            background-color: #004080 !important; /* Color azul aún más oscuro */
        }
        """
        self.wview.page().runJavaScript(f"""
            var style = document.createElement('style');
            style.type = 'text/css';
            style.innerHTML = `{custom_css}`;
            document.head.appendChild(style);
        """)

    def show_about(self):
        about_window = AboutDialog(self)
        about_window.show()

    def get_flatpak_version(self):
        process = QProcess()
        process.start("flatpak", ["--version"])
        process.waitForFinished()
        version = process.readAll().data().decode().strip()
        
        version_number = version.replace("Flatpak", "").strip()
        
        return version_number

    def update_back_button(self, url):
        self.button_back.setEnabled(self.wview.history().canGoBack() and url.toString() != 'https://flathub.org/es')

    def go_home(self):
        self.wview.load(QUrl('https://flathub.org/es'))
        self.button_back.setEnabled(False)

    def go_back(self):
        if self.wview.history().canGoBack():
            self.wview.back()
            self.button_back.setEnabled(self.wview.url().toString() != 'https://flathub.org/es')
        else:
            self.button_back.setEnabled(False)

    def show_installed_apps(self):
        self.installed_apps_dialog = InstalledAppsDialog(self)
        self.installed_apps_dialog.show()

    def update_flatpaks(self):
        self.update_process = QProcess()
        self.output_window = CommandOutput(self.tr("Actualización en progreso..."), "", process=self.update_process, is_process=True, parent=self)
        self.output_window.show()

        self.update_process.setProcessChannelMode(QProcess.MergedChannels)
        self.update_process.readyRead.connect(lambda: self.output_window.text_edit.append(self.update_process.readAll().data().decode()))
        self.update_process.finished.connect(self.output_window.on_process_finished)
        self.update_process.start("flatpak", ["update", "-y"])

    def show_history(self):
        process = QProcess()
        process.start("flatpak", ["history"])
        process.waitForFinished()
        history_output = process.readAll().data().decode()

        self.history_window = CommandOutput(self.tr("Historial de operaciones recientes"), history_output, parent=self)
        self.history_window.show()

    def repair_flatpak(self):
        self.repair_process = QProcess()
        self.output_window = CommandOutput(self.tr("Reparación en progreso..."), "", process=self.repair_process, is_process=True, parent=self)
        self.output_window.show()

        self.repair_process.setProcessChannelMode(QProcess.MergedChannels)
        self.repair_process.readyRead.connect(lambda: self.output_window.text_edit.append(self.repair_process.readAll().data().decode()))
        self.repair_process.finished.connect(self.output_window.on_process_finished)
        self.repair_process.start("flatpak", ["repair"])

    def install_local_flatpak(self):
        file_dialog = QFileDialog(self)
        file_dialog.setNameFilter("Flatpakref files (*.flatpakref)")
        file_dialog.setFileMode(QFileDialog.ExistingFile)

        if file_dialog.exec_():
            flatpakref_path = file_dialog.selectedFiles()[0]

            self.local_install_process = QProcess()
            self.output_window = CommandOutput(self.tr("Instalación de Flatpak en progreso..."), "", process=self.local_install_process, is_process=True, parent=self)
            self.output_window.show()

            self.local_install_process.setProcessChannelMode(QProcess.MergedChannels)  
            self.local_install_process.readyRead.connect(self.read_process_output)  
            self.local_install_process.finished.connect(self.on_install_finished) 

            self.local_install_process.start('flatpak', ['install', '--system', '-y', flatpakref_path])

            if not self.local_install_process.waitForStarted():
                self.output_window.text_edit.append(self.tr("Error: No se pudo iniciar el proceso de instalación."))
                return

    def read_process_output(self):
        if self.local_install_process:
            output = self.local_install_process.readAll().data().decode()
            if output:
                self.output_window.text_edit.append(output)

    def on_install_finished(self, exit_code, exit_status):
        if self.local_install_process:
            print(f"Proceso finalizado con código {exit_code} y estado {exit_status}")  # Depuración
            if exit_status == QProcess.NormalExit and exit_code == 0:
                self.output_window.text_edit.append(self.tr("Instalación completada correctamente."))
            else:
                self.output_window.text_edit.append(self.tr("Proceso finalizado."))
            self.output_window.switch_to_finalize_button()

    def download_requested(self, download):
        url = download.url().toString()
        if url.endswith('.flatpakref'):
            with urllib.request.urlopen(url) as response, tempfile.NamedTemporaryFile(suffix='.flatpakref', delete=False) as fp:
                shutil.copyfileobj(response, fp)
                fp.close()

                self.process = QProcess()
                self.output_window = CommandOutput(self.tr("Instalación de Flatpak en progreso..."), "", process=self.process, is_process=True, parent=self)
                self.output_window.show()

                self.process.setProcessChannelMode(QProcess.MergedChannels)
                self.process.readyRead.connect(lambda: self.output_window.text_edit.append(self.process.readAll().data().decode()))
                self.process.finished.connect(self.output_window.on_process_finished)

                self.process.start('flatpak', ['install', '--system', '-y', fp.name])

                download.cancel()
        elif not url.startswith('https://flathub.org/es'):
            webbrowser.open(url, 2)
            download.cancel()

    def read_output(self):
        text = bytes(self.process.readAll()).decode("utf-8")
        self.output_window.append_output(text)

def load_language_config():
    config_path = QDir.homePath() + "/.flathubui-config/config.json"
    try:
        with open(config_path, "r") as config_file:
            config = json.load(config_file)
            return config.get("language", "es")  # Idioma por defecto: inglés
    except (FileNotFoundError, json.JSONDecodeError):
        print("No se pudo cargar el archivo de configuración. Usando idioma predeterminado.")
        return "en"

def load_translation(app, language_code):
    translator = QTranslator()
    locale_file = f"{translation_path}/ts_flathub-store-ui_{language_code}.qm"
    if translator.load(locale_file):
        app.installTranslator(translator)
        print(f"Traducción cargada: {locale_file}")
    else:
        print(f"Error: No se encontró el archivo de traducción para {language_code}.")

if __name__ == "__main__":
    app = QApplication(sys.argv)

    user_language = get_user_language()
    load_translation(app, user_language)

    main_window = PythonWebView()
    main_window.show()
    sys.exit(app.exec_())